<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AxiosTest,repeat</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

</head>
<body>
    <!-- 기본적으로 axios복습 ㄱㄱ -->
    <form name="register">
        <input type="text" name="id" pattern="^[a-z0-9]{5,}$" title="소문자, 숫자를 이용하여 5글자 이상" required/>
        <input type="password" name="pw" />
        <input type="text" name="name" placeholder="이름" />
        <div>
            <button type="button" onclick="axiosGet()" >axiosGet전송</button>
            <button type="button" onclick="axiosPost()">axiosPost전송</button>
        </div>
    </form>
    <h3 id="result"></h3>

    <!-- test -->

    <script>
        // 기본적으로 담아둬야할 데이터
        function getData(){
            const form = document.forms["register"];

            if(!form.checkValidity()){ // checkValidity폼의 유효성을 검사해서 boolean값 반환 
                form.reportValidity(); //reportValidity: 유효성 검사를 통과하지 못 한 input에 대해 report
                return false; //false 안써도 상관없다!!
            }

            // getData라는 함수의 반환값은 총 2가지 형태
            // false | object (객체 형태)
            const data ={
                id: form.id.value,
                pw: form.pw.value,
                name: form.name.value
            }
            return data; // data를 반환해준다는 것을 기억하자..
        }

        function axiosGet(){
            const data = getData();
            if(!data) return; // 이부분 헷갈리네 좀..

            //axios함수는 promise객체를 반환한다.
            axios({
                method: "GET",
                url: "/axiosGet",
                params: data //get요청으로 데이터 보낼때 params사용
            }).then((res) =>{
                //서버에서 보내준 응답이 res에 담긴다.
                console.log("res", res);
                console.log("res.data", res.data);
                const {
                    name
                } = res.data;
                $("#result").html(`axios get 요청성공 ${name}님 환영해요`);
            })

        }
        async function axiosPost(){
            // 동적 폼 전송
            // 폼 유효성 검사도 하고 싶음.
            // 폼 유효성 검사를 input 태그의 pattern, minlength, required 등의 속성을 이용하여 하고 싶음
            
            // input 태그의 pattern, minlength, required 이 속성은 form의 "submit" 이 일어날 때 동작함.
            // 동적 폼 전송은 form 의 "submit" 을 이용하는 게 아님.
            // 따라서, javascript 코드 내에서 폼 유효성 검사를 하는 코드를 작성해야함.
            // 방법 1)
            // const regex = /^[a-z0-9]{5,}$/
            // regex.test(form.id.value)
            // 방법 2)
            // form.checkVaildity()와 form.reportVaildity() 를 이용해서 input에 작성된 유효성을 검증
            const data = getData();
            // data에 받아오는 값은 두가지 형태 중 하나
            // false | object (객체 형태)
            if(!data) return;
            
            // promise활용
            const res = await axios({
                method: "post",
                url: "/axiosPost",
                data: data, // post일 경우 서버에 데이터를 보낼 때, data 키에 담아서 보내면 됨.
            })
            console.log("res", res);
            console.log("res.data= ", res.data);
            $("#result").html(`axiosPost 요청 성공시 ${res.data.name} 환영합니다.`);

            // ==============기본 axios형태==========
            // axios({
            //     method: "POST",
            //     url: "axiosPost",
            //     data: data, //// post일 경우 서버에 데이터를 보낼 때, data 키에 담아서 보내면 됨.

            // }).then((res) =>{
            //     console.log(res.data);
            //     const {
            //         name
            //     } = res.data;
            //     $("#result").html(`axioPost요청 성공시 ${name}님 반값습니다~~`);
            // })

        }
    </script>

</body>
</html>